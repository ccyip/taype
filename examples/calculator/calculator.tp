data expr
  = Const int
  | Var int
  | Add expr expr
  | Sub expr expr
  | Mul expr expr
  | Div expr expr

data vars = Nil | Cons int vars

fn lookup : vars -> int -> int = \xs idx =>
  match xs with
  | Nil => 0
  | Cons x xs' =>
    if idx <= 0
    then x
    else lookup xs' (idx-1)
  end

fn eval : vars -> expr -> int = \xs e =>
  match e with
  | Const x => x
  | Var idx => lookup xs idx
  | Add e1 e2 => eval xs e1 + eval xs e2
  | Sub e1 e2 => eval xs e1 - eval xs e2
  | Mul e1 e2 => eval xs e1 * eval xs e2
  | Div e1 e2 => eval xs e1 / eval xs e2
  end

// ----------------------------------------------------------------
// Oblivious types

// k is the maximum depth of the expression.
obliv ~expr (k : int) =
  if k = 0
  then
    // Either Const or Var
    ~int ~+ ~int
  else
    // Const
    ~int ~+
    // Var
    ~int ~+
    // Add
    ~expr (k-1) ~* ~expr (k-1) ~+
    // Sub
    ~expr (k-1) ~* ~expr (k-1) ~+
    // Mul
    ~expr (k-1) ~* ~expr (k-1) ~+
    // Div
    ~expr (k-1) ~* ~expr (k-1)

fn ~expr#s : (k : int) -> expr -> ~expr k = \k e =>
  if k = 0
  then
    match e with
    | Const x => ~inl (~int#s x)
    | Var idx => ~inr (~int#s idx)
    // Bogus
    | Add _ _ => ~~
    | Sub _ _ => ~~
    | Mul _ _ => ~~
    | Div _ _ => ~~
    end
  else
    match e with
    | Const x => ~inl (~int#s x)
    | Var idx => ~inr (~inl (~int#s idx))
    | Add e1 e2 =>
      ~inr (~inr (~inl ~(~expr#s (k-1) e1, ~expr#s (k-1) e2)))
    | Sub e1 e2 =>
      ~inr (~inr (~inr (~inl ~(~expr#s (k-1) e1, ~expr#s (k-1) e2))))
    | Mul e1 e2 =>
      ~inr (~inr (~inr (~inr (~inl ~(~expr#s (k-1) e1, ~expr#s (k-1) e2)))))
    | Div e1 e2 =>
      ~inr (~inr (~inr (~inr (~inr ~(~expr#s (k-1) e1, ~expr#s (k-1) e2)))))
    end

fn' ~expr#r : (k : int) -> ~expr k -> expr = \k =>
  if k = 0
  then \e =>
    ~match e with
    | ~inl x => Const (~int#r x)
    | ~inr idx => Var (~int#r idx)
    end
  else \e =>
    ~match e with
    | ~inl x => Const (~int#r x)
    | ~inr e =>
      ~match e with
      | ~inl idx => Var (~int#r idx)
      | ~inr e =>
        ~match e with
        | ~inl ~(e1, e2) => Add (~expr#r (k-1) e1) (~expr#r (k-1) e2)
        | ~inr e =>
          ~match e with
          | ~inl ~(e1, e2) => Sub (~expr#r (k-1) e1) (~expr#r (k-1) e2)
          | ~inr e =>
            ~match e with
            | ~inl ~(e1, e2) => Mul (~expr#r (k-1) e1) (~expr#r (k-1) e2)
            | ~inr ~(e1, e2) => Div (~expr#r (k-1) e1) (~expr#r (k-1) e2)
            end
          end
        end
      end
    end

fn ~expr#match :
  #~expr ->
  (~int -> 'a) ->
  (~int -> 'a) ->
  (#~expr * #~expr -> 'a) ->
  (#~expr * #~expr -> 'a) ->
  (#~expr * #~expr -> 'a) ->
  (#~expr * #~expr -> 'a) ->
  'a = \#(k, e) fc fv fa fs fm fd =>
  (if k = 0
   then \e =>
     ~match e with
     | ~inl x => fc x
     | ~inr idx => fv idx
     end
   else \e =>
     ~match e with
     | ~inl x => fc x
     | ~inr e =>
       ~match e with
       | ~inl idx => fv idx
       | ~inr e =>
         ~match e with
         | ~inl ~(e1, e2) => fa (#(k-1, e1), #(k-1, e2))
         | ~inr e =>
           ~match e with
           | ~inl ~(e1, e2) => fs (#(k-1, e1), #(k-1, e2))
           | ~inr e =>
             ~match e with
             | ~inl ~(e1, e2) => fm (#(k-1, e1), #(k-1, e2))
             | ~inr ~(e1, e2) => fd (#(k-1, e1), #(k-1, e2))
             end
           end
         end
       end
     end : ~expr k -> 'a) e

// k is the exact length of the variable list.
obliv ~vars (k : int) =
  if k = 0
  then unit
  else ~int ~* ~vars (k-1)

fn ~vars#s : (k : int) -> vars -> ~vars k = \k xs =>
  if k = 0
  then ()
  else
    match xs with
    | Nil => ~~
    | Cons x xs' => ~(~int#s x, ~vars#s (k-1) xs')
    end

fn' ~vars#r : (k : int) -> ~vars k -> vars = \k =>
  if k = 0
  then \_ => Nil
  else \~(x, xs') => Cons (~int#r x) (~vars#r (k-1) xs')

fn ~vars#match : #~vars -> (unit -> 'a) -> (~int * #~vars -> 'a) -> 'a =
  \#(k, xs) f1 f2 =>
    (if k = 0
     then \_ => f1 ()
     else \xs =>
       ~match xs with
       | ~(x, xs') => f2 (x, #(k-1, xs'))
       end : ~vars k -> 'a) xs

//--------------------------------------------------------------
// Lifted functions

fn ~eval : #~vars -> #~expr -> ~int = %lift eval

fn ~vars2 : ~int -> ~int -> #~vars = \x y =>
  #(2, ~(x, ~(y, ())))
