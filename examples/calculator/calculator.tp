data expr
  = Const int
  | Var int
  | Add expr expr
  | Sub expr expr
  | Mul expr expr
  | Div expr expr

data vars = Nil | Cons int vars

fn lookup : vars -> int -> int = \xs idx ->
  case xs of
  | Nil -> 0
  | Cons x xs' ->
    if idx <= 0
    then x
    else lookup xs' (idx-1)
  end

fn eval : vars -> expr -> int = \xs e ->
  case e of
  | Const x -> x
  | Var idx -> lookup xs idx
  | Add e1 e2 -> eval xs e1 + eval xs e2
  | Sub e1 e2 -> eval xs e1 - eval xs e2
  | Mul e1 e2 -> eval xs e1 * eval xs e2
  | Div e1 e2 -> eval xs e1 / eval xs e2
  end

----------------------------------------------------------------
-- Oblivious types

-- k is the maximum depth of the expression.
obliv `expr (k : int) =
  if k == 0
  then
    -- Either Const or Var
    `int `+ `int
  else
    -- Const
    `int `+
    -- Var
    `int `+
    -- Add
    `expr (k-1) `* `expr (k-1) `+
    -- Sub
    `expr (k-1) `* `expr (k-1) `+
    -- Mul
    `expr (k-1) `* `expr (k-1) `+
    -- Div
    `expr (k-1) `* `expr (k-1)

#[section]
fn s_expr : (k : int) -> expr -> `expr k = \k e ->
  if k == 0
  then
    tape
      (case e of
       | Const x -> `inl (tape (s_int x))
       | Var idx -> `inr (tape (s_int idx))
       -- Bogus
       | Add _ _ -> `inl (s_int 0)
       | Sub _ _ -> `inl (s_int 0)
       | Mul _ _ -> `inl (s_int 0)
       | Div _ _ -> `inl (s_int 0)
       end)
  else
    tape
      (case e of
       | Const x -> `inl (tape (s_int x))
       | Var idx -> `inr (`inl (tape (s_int idx)))
       | Add e1 e2 ->
         `inr (`inr (`inl `(s_expr (k-1) e1, s_expr (k-1) e2)))
       | Sub e1 e2 ->
         `inr (`inr (`inr (`inl `(s_expr (k-1) e1, s_expr (k-1) e2))))
       | Mul e1 e2 ->
         `inr (`inr (`inr (`inr (`inl `(s_expr (k-1) e1, s_expr (k-1) e2)))))
       | Div e1 e2 ->
         `inr (`inr (`inr (`inr (`inr `(s_expr (k-1) e1, s_expr (k-1) e2)))))
       end)

#[retraction]
fn r_expr : (k : int) -> `expr k -> expr = \k ->
  if k == 0
  then \e ->
    `case e of
    | `inl x -> Const (r_int x)
    | `inr idx -> Var (r_int idx)
    end
  else \e ->
    `case e of
    | `inl x -> Const (r_int x)
    | `inr e ->
      `case e of
      | `inl idx -> Var (r_int idx)
      | `inr e ->
        `case e of
        | `inl `(e1, e2) -> Add (r_expr (k-1) e1) (r_expr (k-1) e2)
        | `inr e ->
          `case e of
          | `inl `(e1, e2) -> Sub (r_expr (k-1) e1) (r_expr (k-1) e2)
          | `inr e ->
            `case e of
            | `inl `(e1, e2) -> Mul (r_expr (k-1) e1) (r_expr (k-1) e2)
            | `inr `(e1, e2) -> Div (r_expr (k-1) e1) (r_expr (k-1) e2)
            end
          end
        end
      end
    end

-- k is the exact length of the variable list.
obliv `vars (k : int) =
  if k == 0
  then unit
  else `int `* `vars (k-1)

#[section]
fn s_vars : (k : int) -> vars -> `vars k = \k xs ->
  if k == 0
  then ()
  else
    tape
      (case xs of
       | Nil ->
         -- Bogus
         `(s_int 0, s_vars (k-1) Nil)
       | Cons x xs' -> `(tape (s_int x), s_vars (k-1) xs')
       end)

#[retraction]
fn r_vars : (k : int) -> `vars k -> vars = \k ->
  if k == 0
  then \_ -> Nil
  else \xs ->
    `case xs of
    `(x, xs') -> Cons (r_int x) (r_vars (k-1) xs')
    end

----------------------------------------------------------------
-- Lifted functions

#[safe]
fn `eval : (vk : int) -> (ek : int) -> `vars vk -> `expr ek -> `int =
  \vk ek xs e ->
    tape (s_int (eval (r_vars vk xs) (r_expr ek e)))

#[safe]
fn `vars2 : `int -> `int -> `vars 2 = \x y ->
  s_vars 2 (Cons (r_int x) (Cons (r_int y) Nil))
