data list = Nil | Cons int list

fn length : list -> uint = \xs =>
  match xs with
  | Nil => 0
  | Cons _ xs' => 1 + length xs'
  end

fn append : list -> list -> list = \xs ys =>
  match xs with
  | Nil => ys
  | Cons x xs' => Cons x (append xs' ys)
  end

fn map : (int -> int) -> list -> list = \f xs =>
  match xs with
  | Nil => Nil
  | Cons x xs' => Cons (f x) (map f xs')
  end

fn mapi' : int -> (int -> int -> int) -> list -> list = \i f xs =>
  match xs with
  | Nil => Nil
  | Cons x xs' => Cons (f i x) (mapi' (i+1) f xs')
  end

fn mapi : (int -> int -> int) -> list -> list = mapi' 0

fn map2 : (int -> int -> int) -> list -> list -> list = \f xs ys =>
  match xs with
  | Nil => Nil
  | Cons x xs' =>
    match ys with
    | Nil => Nil
    | Cons y ys' =>
      Cons (f x y) (map2 f xs' ys')
    end
  end

fn init' : int -> int -> (int -> int) -> list = \i n f =>
  if n <= 0
  then Nil
  else Cons (f i) (init' (i+1) (n-1) f)

fn init : int -> (int -> int) -> list = init' 0

// ----------------------------------------------------------------
// Millionaire problem

// Yes it is quite dumb, as we can simply invoke the oblivious comparison
// directly.
fn le : int -> int -> bool = \a b => a <= b

// ----------------------------------------------------------------
// Voting

// We consider two variants of the voting problem. In the first variant, each
// party provides a list whose indices represent the candicates and the elements
// are the corresponding votes. This is realistic as each party can sort their
// votes locally first. The second variant is slightly more complex: each party
// simply gives a list of votes, i.e. every element is an index of the
// candicate. The algorithm here is also responsible for counting them. In
// either variant, the main function returns the index of the candicate who has
// the most votes.

fn elect1' : list -> int -> int -> int -> int * int = \xs i m mi =>
  match xs with
  | Nil => (m, mi)
  | Cons x xs' =>
    match elect1' xs' (i+1) m mi with
    (m', mi') =>
      if x <= m'
      then (m', mi')
      else (x, i)
    end
  end

// The first variant. The input list consists of counted votes for each
// candicate (as index).
fn elect1 : list -> int = \xs =>
  match xs with
  | Nil => (-1)
  | Cons x xs' =>
    match elect1' xs' 1 x 0 with (_, i) => i end
  end

fn test_elect1 : list -> list -> int = \xs ys =>
  elect1 (map2 (\x y => x + y) xs ys)

fn count_votes : list -> int -> int = \xs i =>
  match xs with
  | Nil => 0
  | Cons x xs' =>
    if x = i
    then 1 + count_votes xs' i
    else count_votes xs' i
  end

// The second variant. The input list consists of candicate indices. This
// function also takes the number of candicates.
fn elect2 : int -> list -> int = \n xs =>
  let votes = init n (count_votes xs) in
  elect1 votes

fn test_elect2 : int -> list -> list -> int = \n xs ys =>
  elect2 n (append xs ys)

// ----------------------------------------------------------------
// Oblivious types

// Exact length as the public view.
obliv ~list (k : uint) =
  if k = 0
  then unit
  else ~int ~* ~list (k-1)

fn ~list#s : (k : uint) -> list -> ~list k = \k xs =>
  if k = 0
  then ()
  else match xs with
       | Nil => ~~
       | Cons x xs' => ~(~int#s x, ~list#s (k-1) xs')
       end

fn' ~list#r : (k : uint) -> ~list k -> list = \k =>
  if k = 0
  then \_ => Nil
  else \~(x, xs') => Cons (~int#r x) (~list#r (k-1) xs')

fn ~list#Nil : unit -> #~list = \_ => #(0, ())

fn ~list#Cons : ~int * #~list -> #~list = \(x, #(k, xs)) =>
  #(k+1, ~(x, xs))

fn ~list#match : #~list -> (unit -> 'a) -> (~int * #~list -> 'a) -> 'a =
  \#(k, xs) f1 f2 =>
    (if k = 0
     then \_ => f1 ()
     else \~(x, xs') => f2 (x, #(k-1, xs')) : ~list k -> 'a) xs

fn ~list#view : list -> uint = length

// ----------------------------------------------------------------
// Lifted functions

fn ~le : ~int -> ~int -> ~bool = %lift le

fn ~test_elect1 : #~list -> #~list -> ~int = %lift test_elect1

fn ~test_elect2 : int -> #~list -> #~list -> ~int = %lift test_elect2
