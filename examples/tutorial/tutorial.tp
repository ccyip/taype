// This file introduces the basic of the Taype language.

// Here is a standard list definition with integer payload. We do not support
// type polymorphism at the moment.
//
// The ADT name should start with a lower-case letter, and constructors should
// start with an upper-case letter.
data list = Nil | Cons int list

// We can write a simple function over list that checks if an integer is an
// element of the list. We need to provide the type signatures for the function
// definitions. Most language constructs are similar to the ones found in
// standard functional languages, with slightly different syntax. The function
// name should start with a lower-case letter, possibly prefixed by "~" for
// oblivious functions.
fn elem : int -> list -> bool = \y xs =>
  match xs with
  | Nil => false
  | Cons x xs' => if x = y then true else elem y xs'
  end

// Here is a filter function that drops all elements in a list above a certain
// bound. The language does support higher-order functions, but we use this
// specialized version for the tutorial. A more standard, higher-order filter
// function can be found in [examples/list/list.tp].
fn filter : list -> int -> list = \xs y =>
  match xs with
  | Nil => Nil
  | Cons x xs' =>
    if x <= y then Cons x (filter xs' y) else filter xs' y
  end

// Now let's implement a corresponding oblivious list. By convention, we prefix
// the oblivious type with "~". The name after the prefix should start with a
// lower-case letter. All builtin oblivious operations are also prefixed by "~".
// An oblivious type takes a public view (the public information of a data
// shared by all parties) and returns a private representation. Here the public
// view [k] is the maximum length of the list.
obliv ~list (k : uint) =
  if k = 0
  // If the maximum length is 0, the list can only be a Nil (with no
  // information attached to it), so we return a [unit] type.
  then unit
  // Otherwise, this list can be either a [Nil] (unit type) or a [Cons] (with
  // its payload and the remaining list of maximum length [k-1]). These two
  // alternatives are connected by [~+], the oblivious sum former. On the other
  // hand, the payload [~int] and the tail in the Cons case are connected by
  // [~*], the oblivious product former.
  else unit ~+ ~int ~* ~list (k-1)

// We define the corresponding section and retraction functions, as instances of
// the OADT structure of [~list]. The name [~list#s] indicates that this is the
// section instance of the oblivious type [~list]. We will use the builtin
// section and retraction functions for integers, [~int#s] and [~int#r].
fn ~list#s : (k : uint) -> list -> ~list k = \k xs =>
  if k = 0
  // In this case, the oblivious list is simply a unit type, with the only
  // inhabitant [()].
  then ()
  // We return the left or right oblivious injection ([~inl] and [~inr]),
  // depending on if the list is a [Nil] or a [Cons].
  else match xs with
       | Nil => ~inl ()
       | Cons x xs' => ~inr ~(~int#s x, ~list#s (k-1) xs')
       end

// This is the retraction instance of [~list]. The keyword [fn'] indicates that
// this function is unsafe, i.e. it may disclose private information. The type
// system ensures this kind of leaky functions do not interfere the oblivious
// computation; retraction functions can only be used in the reveal phase to
// disclose the output of the oblivious computation.
fn' ~list#r : (k : uint) -> ~list k -> list = \k =>
  // Note that, unlike [~list#s], we have to do pattern matching on the public
  // view first and return a function inside, instead of pattern matching after
  // introducing the oblivious list argument. This is a well-known trick to
  // please the dependent type checker (and the only trick we need in all our
  // examples), so that the type of the function argument [~list k] can take the
  // condition [k = 0] into account. For example, the type of argument [xs] in
  // the second branch is equivalent to [unit ~+ ~int ~* ~list (k-1)], only
  // under the assumption that [k = 0] is [false].
  if k = 0
  // In this case, the list can only be a [Nil].
  then \_ => Nil
  // In this case, we return [Nil] or [Cons] depending on if the oblivious sum
  // is left or right injection. The language supports some *limited* form of
  // general pattern matching, so we can simply destruct the oblivious product
  // type in place. But don't expect too much from it.
  else \xs => ~match xs with
              | ~inl _ => Nil
              | ~inr ~(x, xs') => Cons (~int#r x) (~list#r (k-1) xs')
              end

// In order to convert the standard programs, such as [elem], to the oblivious
// counterparts, we need to define a few boilerplate functions that help the
// lifting procedure. Some of them can potentially be synthesized from the
// section and retraction functions, to levitate the user burden; we leave it as
// future work.

// The following two functions are the constructor instances of [~list]. They
// take a single argument, corresponding to the parameters of this constructor,
// and return the *Psi-type* of [~list]. Psi type is essentially a restricted
// dependent pair (a.k.a. dependent sum type, sigma type, or existential type),
// packing an oblivious value and its public view together. For example,
// [#~list] consists of the public view ([int]) of [~list], [k], and an
// oblivious value of type [~list k]. A Psi-type is introduced by a syntax
// similar to pair: [#(_, _)].

// This is the [Nil] constructor instance of [~list]. [Nil] takes nothing, so
// the argument is [unit].
fn ~list#Nil : unit -> #~list = \_ =>
  // A [Nil] may have public view [0].
  #(0, ())

// This is the [Cons] constructor instance of [~list]. The argument should be
// *compatible* with the product of this constructor's arguments, i.e. [int *
// list]. Roughly speaking, oblivious integer and boolean are compatible with
// the public versions, and Psi types of the OADTs are compatible with the
// corresponding ADTs.
fn ~list#Cons : ~int * #~list -> #~list = \(x, #(k, xs)) =>
  // The public view of a [Cons] should be one bigger than its tail.
  #(k+1, ~inr ~(x, xs))

// Similar to constructors (the introduction form of an ADT), we also need to
// define the "destructor", i.e. the elimination form, which corresponds to
// pattern matching this ADT. It takes the Psi-type of [~list] and then a list
// of functions, corresponding to the alternatives of the [match] expression.
// Like constructor instances, the arguments of the alternative functions should
// be compatible with the corresponding constructor parameters. The alternative
// functions and this match instance return a parametric type variable ['a], as
// pattern matching can eliminate the ADT to an arbitrary type. Note that the
// language does not support parametric type polymorphism yet; this use of
// parametric type is limited to match instance, and has a few restrictions.
fn ~list#match : #~list -> (unit -> 'a) -> (~int * #~list -> 'a) -> 'a =
  \#(k, xs) f1 f2 =>
    // Again, we use this trick of returning functions inside pattern matching
    // (or conditional) to make dependent type checker happy.
    (if k = 0
     then \_ => f1 ()
     else \xs =>
       // Implicitly, the type variable ['a] needs to be *mergeable*, if we use
       // [~if] or [~match] expressions that return this ['a]. Roughly speaking,
       // a Psi-type is mergeable if it has a join structure, and other
       // primitive oblivious types are trivially mergeable. For example,
       // [#~list] is mergeable because it has a join structure that is defined
       // below, and [~bool] and [~int] are mergeable. When the lifting
       // procedure resolves the match instance, it will require the type
       // unified with ['a] to be mergeable, or the lifting procedure will fail.
       ~match xs with
       | ~inl _ => f1 ()
       | ~inr ~(x, xs') => f2 (x, #(k-1, xs'))
       end : ~list k -> 'a) xs

// A view instance maps the ADT to one of its valid public views of the OADT,
// preferably a "minimal" one. We can coerce a public ADT to a Psi-type, e.g.,
// from [list] to [#~list], if it has a view instance. In this case, the view
// instance is simply the length function.
fn ~list#view : list -> uint = \xs =>
  match xs with
  | Nil => 0
  | Cons _ xs' => 1 + ~list#view xs'
  end

// An OADT can be optionally equipped with a join structure, consisting of a
// join function and a reshape function. A Psi-type with a join structure can be
// the return type of an oblivious conditional or oblivious sum elimination (or
// a match instance, e.g., [~list#match], that uses these two). Not all OADTs
// have a join structure.

// A join instance of an OADT returns the join, i.e. supremum or least upper
// bound, of its two public views. In this case, it is the maximum of the two
// integers.
fn ~list#join : uint -> uint -> uint = \x y => if x <= y then y else x

// A reshape instance converts an OADT to one with a "bigger" public view.
fn ~list#reshape : (k : uint) -> (k' : uint) -> ~list k -> ~list k' = \k k' =>
  if k' = 0
  then \_ => ()
  else
    if k = 0
    then \_ => ~inl ()
    else \xs =>
      ~match xs with
      | ~inl _ => ~inl ()
      | ~inr ~(x, xs') => ~inr ~(x, ~list#reshape (k-1) (k'-1) xs')
      end

// We can define another oblivious list type whose public view is the exact
// length of the list. The definitions of its structures are analogous to the
// ones of [~list].
obliv ~list_eq (k : uint) =
  if k = 0
  then unit
  else ~int ~* ~list_eq (k-1)

fn ~list_eq#s : (k : uint) -> list -> ~list_eq k = \k xs =>
  if k = 0
  then ()
  else match xs with
       // [~~] returns an arbitrary oblivious value (of the corresponding type).
       // We use it here because [xs] is never [Nil] when its exact length [k]
       // is not 0.
       | Nil => ~~
       | Cons x xs' => ~(~int#s x, ~list_eq#s (k-1) xs')
       end

fn' ~list_eq#r : (k : uint) -> ~list_eq k -> list = \k =>
  if k = 0
  then \_ => Nil
  else \~(x, xs') => Cons (~int#r x) (~list_eq#r (k-1) xs')

fn ~list_eq#Nil : unit -> #~list_eq = \_ => #(0, ())

fn ~list_eq#Cons : ~int * #~list_eq -> #~list_eq = \(x, #(k, xs)) =>
  #(k+1, ~(x, xs))

fn ~list_eq#match : #~list_eq -> (unit -> 'a) -> (~int * #~list_eq -> 'a) -> 'a =
  \#(k, xs) f1 f2 =>
    (if k = 0
     then \_ => f1 ()
     else \~(x, xs') => f2 (x, #(k-1, xs')) : ~list_eq k -> 'a) xs

// The view of [~list_eq] is the same as that of [~list].
fn ~list_eq#view : list -> uint = ~list#view

// This coercion instance converts a [~list_eq] to an equivalent [~list].
fn ~list_eq#~list#coerce : #~list_eq -> #~list = \pxs =>
  // We can implement it using typed macros. In fact, most typed macros
  // presented in the paper for the lifting algorithm are also available in the
  // source syntax. [%match] here is resolved to [~list_eq#match] with the
  // polymorphic return type ['a] set to [#~list]. We unfortunately cannot
  // directly use [~list_eq#match] here because the language has very limited
  // support for type polymorphism at the moment. If we do not want to use typed
  // macro, we can instead reimplement a specialized [~list_eq#match] here, of
  // course.
  %match #~list_eq #~list pxs
    (\_ => ~list#Nil ())
    (\(x, xs') => ~list#Cons (x, ~list_eq#~list#coerce xs'))

// Finally, we can simply lift the public functions to the oblivious
// counterparts, using the [%lift] macro that invokes the lifting procedure. The
// type of these functions are essentially the privacy policy.
fn ~elem : ~int -> #~list -> ~bool = %lift elem
fn ~filter : #~list -> ~int -> #~list = %lift filter

// We can lift these two functions against other types (i.e. privacy policies)
// too. For example, we can use [~list_eq] instead, or even public types
// (policies that are infeasible or insecure will get rejected, of course). Left
// as exercises!

// All these functions will be compiled to an OCaml library eventually, with
// functions of the same names and prefix "~" translated to "obliv_" and "#"
// translated to "_". For example, we can call [obliv_elem] in a main OCaml file
// to perform oblivious membership query. Two functions, "Conceal.obliv_list_s"
// and "Reveal.obliv_list_r", are exposed in the OCaml library for the conceal
// and reveal phases. The former is used by the party owning the list to turn
// their private list into an oblivious one. The latter is used to "decrypt" an
// oblivious list. See "test_elem.ml" for an example of how the generated
// library can be used.
