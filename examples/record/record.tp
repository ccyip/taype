// Id, age, height (in cm) and weight (in kg)
data patient = Patient int int int int

fn is_taller : patient -> patient -> bool = \p1 p2 =>
  match p1 with
  | Patient _ _ h1 _ =>
    match p2 with
    | Patient _ _ h2 _ => h2 <= h1
    end
  end

// Calculate body mass index (BMI). The result is multiplied by 10 so we don't
// have to deal with floating point.
fn get_bmi : patient -> int = \p =>
  match p with
  | Patient _ _ h w => w * 100000 / (h * h)
  end

// Yes, I know. BMI is not an accurate indication.
fn is_healthy : patient -> bool = \p =>
  let bmi = get_bmi p in 185 <= bmi && bmi <= 249

fn is_obese : patient -> bool = \p =>
  let bmi = get_bmi p in 300 <= bmi

// Database of the patients as a list.
data db = Db_Empty | Db_More patient db

fn is_obese_by_id : db -> int -> bool = \ps id =>
  match ps with
  | Db_Empty => false
  | Db_More p ps' =>
    match p with
    | Patient id' _ _ _ =>
      if id' = id
      then is_obese p
      else is_obese_by_id ps' id
    end
  end

fn count_healthy_age_group : db -> int -> int -> int * int = \ps b e =>
  match ps with
  | Db_Empty => (0, 0)
  | Db_More p ps' =>
    match count_healthy_age_group ps' b e with
    (n, total) =>
      match p with
      | Patient _ age _ _ =>
        if b <= age && age <= e
        then if is_healthy p then (n + 1, total + 1) else (n, total + 1)
        else (n, total)
      end
    end
  end

fn healthy_rate_of_age_group : db -> int -> int -> int = \ps b e =>
  match count_healthy_age_group ps b e with
  (n, total) =>
    if total = 0
    then 0
    else n * 100 / total
  end

fn euclidean_distance : patient -> patient -> int = \p1 p2 =>
  match p1 with
  | Patient _ age1 h1 w1 =>
    match p2 with
    | Patient _ age2 h2 w2 =>
      let d1 = age1 - age2 in
      let d2 = h1 - h2 in
      let d3 = w1 - w2 in
      d1*d1 + d2*d2 + d3*d3
    end
  end

fn min_euclidean_distance_with : db -> patient -> int -> int = \ps ref_p min =>
  match ps with
  | Db_Empty => min
  | Db_More p ps' =>
    let d = euclidean_distance p ref_p in
    let min' = min_euclidean_distance_with ps' ref_p min in
    if d <= min' then d else min'
  end

// biometric matching
fn min_euclidean_distance : db -> patient -> int = \ps ref_p =>
  match ps with
  | Db_Empty => (-1)
  | Db_More p ps' =>
    let d = euclidean_distance p ref_p in
    min_euclidean_distance_with ps' ref_p d
  end

// Isomorhpic to list append
fn db_concat : db -> db -> db = \ps1 ps2 =>
  match ps1 with
  | Db_Empty => ps2
  | Db_More p ps1' =>
    Db_More p (db_concat ps1' ps2)
  end

fn db_length : db -> int = \ps =>
  match ps with
  | Db_Empty => 0
  | Db_More _ ps' => 1 + db_length ps'
  end

fn age_sum : db -> int = \ps =>
  match ps with
  | Db_Empty => 0
  | Db_More p ps' =>
    match p with
    | Patient _ age _ _ => age + age_sum ps'
    end
  end

fn age_mean : db -> int = \ps =>
  let n = db_length ps in
  let s = age_sum ps in
  if n = 0 then (-1) else s / n

fn age_sdm : db -> int -> int = \ps m =>
  match ps with
  | Db_Empty => 0
  | Db_More p ps' =>
    match p with
    | Patient _ age _ _ =>
      let d = age - m in d*d + age_sdm ps' m
    end
  end

fn age_variance : db -> int = \ps =>
  let n = db_length ps in
  let m = age_mean ps in
  let sdm = age_sdm ps m in
  if n = 0 then (-1) else sdm / n

data int_option = None | Some int

data bmi_db = Nil | Cons int int bmi_db

fn bmi_db_lookup : bmi_db -> int -> int_option = \bmis id =>
  match bmis with
  | Nil => None
  | Cons id' bmi bmis' =>
    if id = id' then Some bmi else bmi_db_lookup bmis' id
  end

fn bmi_sse : db -> bmi_db -> int * int = \ps bmis =>
  match ps with
  | Db_Empty => (0, 0)
  | Db_More p ps' =>
    match p with
    | Patient id _ _ _ =>
      match bmi_sse ps' bmis with
      (se, total) =>
        match bmi_db_lookup bmis id with
        | Some bmi =>
          let bmi' = get_bmi p in
          let d = bmi - bmi' in
          (se + d*d, total + 1)
        | None => (se, total)
        end
      end
    end
  end

fn bmi_mse : db -> bmi_db -> int = \ps bmis =>
  match bmi_sse ps bmis with
  (se, total) =>
    if total = 0 then (-1) else se / total
  end

data feature = Age | Height | Weight

data dtree = Node feature int dtree dtree | Leaf bool

fn decide : dtree -> patient -> bool = \t p =>
  match t with
  | Leaf b => b
  | Node f thd lt rt =>
    match p with
    | Patient _ age h w =>
      let d = match f with
              | Age => age <= thd
              | Height => h <= thd
              | Weight => w <= thd
              end
      in
      if d then decide lt p else decide rt p
    end
  end

// ----------------------------------------------------------------
// Oblivious types, sections and retractions

data patient_view
  // Reveal ID
  = Known_id int
  // Or medical data
  | Known_data int int

obliv ~patient (v : patient_view) =
  match v with
  | Known_id _ => ~int ~* ~int ~* ~int
  | Known_data _ _ => ~int ~* ~int
  end

fn ~patient#s : (v : patient_view) -> patient -> ~patient v = \v p =>
  match v with
  | Known_id _ =>
      match p with
      | Patient _ age h w => ~(~int#s age, ~int#s h, ~int#s w)
      end
  | Known_data _ _ =>
      match p with
      | Patient id age _ _ => ~(~int#s id, ~int#s age)
      end
  end

fn' ~patient#r : (v : patient_view) -> ~patient v -> patient = \v =>
  match v with
  | Known_id id =>
    \~(age, h, w) => Patient id (~int#r age) (~int#r h) (~int#r w)
  | Known_data h w =>
    \~(id, age) => Patient (~int#r id) (~int#r age) h w
  end

fn ~patient#match : #~patient -> (~int * ~int * ~int * ~int -> 'a) -> 'a =
  \#(v, p) f =>
    (match v with
     | Known_id id =>
       \~(age, h, w) => f (~int#s id, age, h, w)
     | Known_data h w =>
       \~(id, age) => f (id, age, ~int#s h, ~int#s w)
     end : ~patient v -> 'a) p

// Due to the lack of type polymorphism, we need to define db_view and
// db_view_concat even though they are just list and list operations.
data db_view = Db_View_Empty | Db_View_More patient_view db_view

obliv ~db (vs : db_view) =
  match vs with
  | Db_View_Empty => unit
  | Db_View_More v vs' => ~patient v ~* ~db vs'
  end

fn ~db#s : (vs : db_view) -> db -> ~db vs = \vs ps =>
  match vs with
  | Db_View_Empty => ()
  | Db_View_More v vs' =>
      match ps with
      | Db_Empty => ~~
      | Db_More p ps' => ~(~patient#s v p, ~db#s vs' ps')
      end
  end

fn' ~db#r : (vs : db_view) -> ~db vs -> db = \vs =>
  match vs with
  | Db_View_Empty => \_ => Db_Empty
  | Db_View_More v vs' =>
    \~(p, ps') => Db_More (~patient#r v p) (~db#r vs' ps')
  end

fn ~db#Db_Empty : unit -> #~db = \_ => #(Db_View_Empty, ())

fn ~db#Db_More : #~patient * #~db -> #~db = \(#(v, p), #(vs, db)) =>
  #(Db_View_More v vs, ~(p, db))

fn ~db#match : #~db -> (unit -> 'a) -> (#~patient * #~db -> 'a) -> 'a =
  \#(vs, db) f1 f2 =>
    (match vs with
    | Db_View_Empty => \_ => f1 ()
    | Db_View_More v vs' =>
      \~(p, db) => f2 (#(v, p), #(vs', db))
    end : ~db vs -> 'a) db

obliv ~bmi_db (k : int) =
  if k = 0
  then unit
  else ~int ~* ~int ~* ~bmi_db (k-1)

fn ~bmi_db#s : (k : int) -> bmi_db -> ~bmi_db k = \k bmis =>
  if k = 0
  then ()
  else match bmis with
       | Nil => ~~
       | Cons id bmi bmis' =>
         ~(~int#s id, ~int#s bmi, ~bmi_db#s (k-1) bmis')
       end

fn' ~bmi_db#r : (k : int) -> ~bmi_db k -> bmi_db = \k =>
  if k = 0
  then \_ => Nil
  else \~(id, bmi, bmis) => Cons (~int#r id) (~int#r bmi) (~bmi_db#r (k-1) bmis)

fn ~bmi_db#match :
  #~bmi_db ->
  (unit -> 'a) ->
  (~int * ~int * #~bmi_db -> 'a) ->
  'a =
  \#(k, db) f1 f2 =>
    (if k = 0 then \_ => f1 ()
     else \~(id, bmi, db) => f2 (id, bmi, #(k-1, db)) : ~bmi_db k -> 'a) db

// Due to the lack of (polymorhpic) sum type support at the moment, we need to
// encode the oblivious type of [int_option]. Ideally the boilerplate of
// [int_option] is completely generated.
obliv ~int_option (_ : unit) = unit ~+ ~int
fn ~int_option#s : (u : unit) -> int_option -> ~int_option u = \_ opt =>
  match opt with
  | None => ~inl ()
  | Some x => ~inr (~int#s x)
  end
fn' ~int_option#r : (u : unit) -> ~int_option u -> int_option = \_ opt =>
  ~match opt with
  | ~inl _ => None
  | ~inr x => Some (~int#r x)
  end
fn ~int_option#None : unit -> #~int_option = \_ => #((), ~inl ())
fn ~int_option#Some : ~int -> #~int_option = \x => #((), ~inr x)
fn ~int_option#match : #~int_option -> (unit -> 'a) -> (~int -> 'a) -> 'a =
  \#(_, opt) f1 f2 =>
    ~match opt with
    | ~inl _ => f1 ()
    | ~inr x => f2 x
    end
fn ~int_option#join : unit -> unit -> unit = \_ _ => ()
fn ~int_option#reshape :
  (u : unit) -> (u' : unit) -> ~int_option u -> ~int_option u' = \_ _ opt => opt

data dtree_view = Node_View feature dtree_view dtree_view | Leaf_View

obliv ~dtree (v : dtree_view) =
  match v with
  | Node_View f lt rt => ~int ~* ~dtree lt ~* ~dtree rt
  | Leaf_View => ~bool
  end

fn ~dtree#s : (v : dtree_view) -> dtree -> ~dtree v = \v t =>
  match v with
  | Node_View f lv rv =>
      match t with
      | Node _ thrd lt rt => ~(~int#s thrd, ~dtree#s lv lt, ~dtree#s rv rt)
      | Leaf _ => ~~
      end
  | Leaf_View =>
      match t with
      | Node _ _ _ _ => ~~
      | Leaf d => ~bool#s d
      end
  end

fn' ~dtree#r : (v : dtree_view) -> ~dtree v -> dtree = \v =>
  match v with
  | Node_View f lv rv =>
    \~(thrd, lt, rt) => Node f (~int#r thrd) (~dtree#r lv lt) (~dtree#r rv rt)
  | Leaf_View => \t => Leaf (~bool#r t)
  end

fn ~dtree#match :
  #~dtree ->
  (feature * ~int * #~dtree * #~dtree -> 'a) ->
  (~bool -> 'a) ->
  'a = \#(v, t) f1 f2 =>
  (match v with
   | Node_View f lv rv =>
     \~(thrd, lt, rt) => f1 (f, thrd, #(lv, lt), #(rv, rt))
   | Leaf_View => \t => f2 t
   end : ~dtree v -> 'a) t

//--------------------------------------------------------------
// Lifted functions

fn ~is_taller : #~patient -> #~patient -> ~bool = %lift is_taller

// Imagine a hospital owns the database, and another entity tries to query if
// someone is obese by id. The entity owning the id may be advertisers or cops,
// who don't want the hospital to know who they are investigating.
fn ~is_obese_by_id : #~db -> ~int -> ~bool = %lift is_obese_by_id

// Imagine a hospital owns the database, and a reserach institute wants to know
// the healthy rate of a age range. The research project might be kept secret.
fn ~healthy_rate_of_age_group : #~db -> ~int -> ~int -> ~int =
  %lift healthy_rate_of_age_group

// Similar to the previous example.
fn ~min_euclidean_distance : #~db -> #~patient -> ~int =
  %lift min_euclidean_distance

// Each database is owned by a hospital. These two hospital want to compute some
// statistics over their combined databases.
fn ~db_concat : #~db -> #~db -> #~db = %lift db_concat

fn ~age_mean : #~db -> ~int = %lift age_mean

fn ~age_variance : #~db -> ~int = %lift age_variance

// Imagine a hospital owns the database. A company, perhaps an AI startup,
// develops a method to estimate a patient's BMI without knowing their height or
// weight. Instead they estimate using other publicly known metrics. Now they
// want to know how accurate their method is, so they provide a database of
// their estimated BMIs, without letting the hospital know what their
// estimations are. This BMI database do not need to match the hospital's
// database exactly: the hospital will only process the data points that their
// databases overlap. The result is the mean-squared-error.
fn ~bmi_mse : #~db -> #~bmi_db -> ~int = %lift bmi_mse

fn ~decide : #~dtree -> #~patient -> ~bool = %lift decide
