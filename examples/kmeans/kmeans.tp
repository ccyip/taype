// These two types are essentially list types, but due to the lack of type
// polymorphism, we have to define them and their functions separately.

data vec = Nil | Cons int vec

data vlist = VNil | VCons vec vlist

fn length : vec -> int = \xs =>
  match xs with
  | Nil => 0
  | Cons _ xs' => 1 + length xs'
  end

fn vlength : vlist -> int = \xs =>
  match xs with
  | VNil => 0
  | VCons _ xs' => 1 + vlength xs'
  end

fn vappend : vlist -> vlist -> vlist = \xs ys =>
  match xs with
  | VNil => ys
  | VCons x xs' => VCons x (vappend xs' ys)
  end

// Calculuate the (squared) distance of two vectors.
fn dist : vec -> vec -> int = \xs ys =>
  match xs with
  | Nil => 0
  | Cons x xs' =>
    match ys with
    | Nil => 0
    | Cons y ys' =>
      let d = x - y in
      d*d + dist xs' ys'
    end
  end

// Return a zero vector of given dimension.
fn zero : int -> vec = \dim =>
  if dim = 0
  then Nil
  else Cons 0 (zero (dim-1))

// Add two vectors pointwise.
fn add : vec -> vec -> vec = \xs ys =>
  match xs with
  | Nil => Nil
  | Cons x xs' =>
    match ys with
    | Nil => Nil
    | Cons y ys' =>
      Cons (x+y) (add xs' ys')
    end
  end

// Divide a vector by a number pointwise.
fn div : vec -> int -> vec = \xs n =>
  match xs with
  | Nil => Nil
  | Cons x xs' =>
    Cons (x / n) (div xs' n)
  end

// Pick [n_clusters] arbitrary centroids. Here we pick them according to a
// stride.
fn init_centroids : int -> int -> int -> vlist -> vlist =
  \n_clusters stride n centroids =>
    match centroids with
    | VNil => VNil
    | VCons v vs =>
      if n_clusters = 0 then VNil
      else if n = 0
      then VCons v (init_centroids (n_clusters-1) stride (stride-1) vs)
      else init_centroids n_clusters stride (n-1) vs
    end

fn best' : vec -> int -> int -> int -> vlist -> int =
  \p min min_idx idx centroids =>
    match centroids with
    | VNil => min_idx
    | VCons v vs =>
      let d = dist p v in
      let min' = if d <= min then d else min in
      let idx' = if d <= min then idx else min_idx in
      best' p min' idx' (idx+1) vs
    end

// Find the index of the best centroid with respect to a point, i.e. this
// centroid and the point have the minimal euclidean distance.
fn best : vec -> vlist -> int = \p centroids =>
  match centroids with
  | VNil => (-1)
  | VCons v vs => best' p (dist p v) 0 1 vs
  end

// Assign each data point the index of the closest centroid. Return the list of
// assignment of the same length as the data point list.
fn assign : vlist -> vlist -> vec = \centroids xs =>
  match xs with
  | VNil => Nil
  | VCons x xs' =>
    Cons (best x centroids) (assign centroids xs')
  end

// Calculate the sum and the number of data points in a cluster.
fn sum_clusters : int -> int -> vlist -> vec -> vec * int =
  \dim idx xs clus =>
    match xs with
    | VNil => (zero dim, 0)
    | VCons x xs' =>
      match clus with
      | Nil => (zero dim, 0)
      | Cons c cs' =>
        match sum_clusters dim idx xs' cs' with
        | (sum, n) =>
          if c = idx
          then (add x sum, n+1)
          else (sum, n)
        end
      end
    end

fn update' : int -> int -> vlist -> vec -> vlist -> vlist =
  \dim idx xs clus centroids =>
    match centroids with
    | VNil => VNil
    | VCons v vs =>
      let v' = match sum_clusters dim idx xs clus with
               (sum, n) => if n = 0 then v else div sum n
               end
      in
      let vs' = update' dim (idx+1) xs clus vs in
      VCons v' vs'
    end

// Update centroids according to the current clusters.
fn update : int -> vlist -> vec -> vlist -> vlist =
  \dim => update' dim 0

// Repeatedly assign clusters and update centroids, according to the given
// number of iteration.
fn kmeans_loop : int -> int -> vlist -> vlist -> vec -> vlist * vec =
  \n dim xs centroids clus =>
    if n = 0
    then (centroids, clus)
    else let centroids' = update dim xs clus centroids in
         let clus' = assign centroids xs in
         kmeans_loop (n-1) dim xs centroids' clus'

// The entry point of the k-mean algorithm.
fn kmeans : int -> int -> int -> vlist -> vec =
  \n_iter n_clusters dim xs =>
    let len = vlength xs in
    let stride = len / n_clusters in
    let centroids = init_centroids n_clusters stride (stride-1) xs in
    let clus = assign centroids xs in
    match kmeans_loop n_iter dim xs centroids clus with
    (_, clus) => clus
    end

fn test_kmeans : int -> int -> int -> vlist -> vlist -> vec =
  \n_iter n_clusters dim xs ys =>
    kmeans n_iter n_clusters dim (vappend xs ys)

// --------------------------------------------------------------
// Oblivious types

// We know the exact dimension of a vector.
obliv ~vec (k : int) =
  if k = 0
  then unit
  else ~int ~* ~vec (k-1)

fn ~vec#s : (k : int) -> vec -> ~vec k = \k xs =>
  if k = 0
  then ()
  else match xs with
       | Nil => ~~
       | Cons x xs' =>
         ~(~int#s x, ~vec#s (k-1) xs')
       end

fn' ~vec#r : (k : int) -> ~vec k -> vec = \k =>
  if k = 0
  then \_ => Nil
  else \xs => ~match xs with
              ~(x, xs') => Cons (~int#r x) (~vec#r (k-1) xs')
              end

fn ~vec#Nil : unit -> #~vec = \_ => #(0, (() :: ~vec 0))
fn ~vec#Cons : ~int * #~vec -> #~vec = \p =>
  match p with
  (x, pxs) =>
    match pxs with
    #(k, xs) =>
      #(k+1, (~(x, xs) :: ~vec (k+1)))
    end
  end

fn ~vec#match : #~vec -> (unit -> 'a) -> (~int * #~vec -> 'a) -> 'a =
  \pxs f1 f2 =>
    match pxs with
    #(k, xs) =>
      (if k = 0
       then \_ => f1 ()
       else \xs =>
         ~match xs with
         | ~(x, xs') => f2 (x, #(k-1, xs'))
         end : ~vec k -> 'a) xs
    end

fn ~vec#view : vec -> int = length

// The public view is the dimension of the payload vectors and the length of
// the list.
obliv ~vlist (p : int * int) =
  match p with
  (dim, k) =>
    if k = 0
    then unit
    else ~vec dim ~* ~vlist (dim, k-1)
  end

fn ~vlist#s : (p : int * int) -> vlist -> ~vlist p = \p xs =>
  match p with
  (dim, k) =>
    if k = 0
    then ()
    else match xs with
         | VNil => ~~
         | VCons x xs' => ~(~vec#s dim x, ~vlist#s (dim, k-1) xs')
         end
  end

fn' ~vlist#r : (p : int * int) -> ~vlist p -> vlist = \p =>
  match p with
  (dim, k) =>
    if k = 0
    then \_ => VNil
    else \xs => ~match xs with
                ~(x, xs') => VCons (~vec#r dim x) (~vlist#r (dim, k-1) xs')
                end
  end

fn ~vlist#VNil : unit -> #~vlist = \_ => #((0, 0), (() :: ~vlist (0, 0)))
fn ~vlist#VCons : #~vec * #~vlist -> #~vlist = \p =>
  match p with
  (v, vs) =>
    match v with
    #(dim, v) =>
      match vs with
      #(k, vs) =>
        match k with
        (_, k) => #((dim, k+1), (~(v, vs) :: ~vlist (dim, k+1)))
        end
      end
    end
  end

fn ~vlist#match : #~vlist -> (unit -> 'a) -> (#~vec * #~vlist -> 'a) -> 'a =
  \vs f1 f2 =>
    match vs with
    #(k', vs) =>
      (match k' with
       (dim, k) =>
         if k = 0 then \_ => f1 ()
         else \vs =>
           ~match vs with
           ~(v, vs') => f2 (#(dim, v), #((dim, k-1), vs'))
           end
       end : ~vlist k' -> 'a) vs
    end

fn ~vlist#view : vlist -> int * int = \vs =>
  match vs with
  | VNil => (0, 0)
  | VCons v _ => (~vec#view v, vlength vs)
  end

// --------------------------------------------------------------
// Oblivious types with join structures

// // Public view is the maximum length.
// obliv ~vec' (k : int) =
//   if k = 0
//   then unit
//   else unit ~+ ~int ~* ~vec' (k-1)

// fn ~vec'#s : (k : int) -> vec -> ~vec' k = \k xs =>
//   if k = 0
//   then ()
//   else match xs with
//        | Nil => ~inl ()
//        | Cons x xs' => ~inr ~(~int#s x, ~vec'#s (k-1) xs')
//        end

// fn' ~vec'#r : (k : int) -> ~vec' k -> vec = \k =>
//   if k = 0
//   then \_ => Nil
//   else \xs => ~match xs with
//               | ~inl _ => Nil
//               | ~inr ~(x, xs') => Cons (~int#r x) (~vec'#r (k-1) xs')
//               end

// fn ~vec'#Nil : unit -> #~vec' = \_ => #(0, (() :: ~vec' 0))
// fn ~vec'#Cons : ~int * #~vec' -> #~vec' = \p =>
//   match p with
//   (x, pxs) =>
//     match pxs with
//     #(k, xs) =>
//       #(k+1, ((~inr ~(x, xs) : unit ~+ ~int ~* ~vec' k) :: ~vec' (k+1)))
//     end
//   end

// fn ~vec'#match : #~vec' -> (unit -> 'a) -> (~int * #~vec' -> 'a) -> 'a =
//   \pxs f1 f2 =>
//     match pxs with
//     #(k, xs) =>
//       (if k = 0
//        then \_ => f1 ()
//        else \xs =>
//          ~match xs with
//          | ~inl _ => f1 ()
//          | ~inr ~(x, xs') => f2 (x, #(k-1, xs'))
//          end : ~vec' k -> 'a) xs
//     end

// fn ~vec'#view : vec -> int = length

// fn ~vec'#join : int -> int -> int = \x y => if x <= y then y else x

// fn ~vec'#reshape : (k : int) -> (k' : int) -> ~vec' k -> ~vec' k' = \k k' =>
//   if k' = 0
//   then \_ => ()
//   else
//     if k = 0
//     then \_ => ~inl ()
//     else \xs =>
//       ~match xs with
//       | ~inl _ => ~inl ()
//       | ~inr ~(x, xs') => ~inr ~(x, ~vec'#reshape (k-1) (k'-1) xs')
//       end

// // Public view is maximum length, and also use [~vec'].
// obliv ~vlist' (p : int * int) =
//   match p with
//   (dim, k) =>
//     if k = 0
//     then unit
//     else unit ~+ ~vec' dim ~* ~vlist' (dim, k-1)
//   end

// fn ~vlist'#s : (p : int * int) -> vlist -> ~vlist' p = \p xs =>
//   match p with
//   (dim, k) =>
//     if k = 0
//     then ()
//     else match xs with
//          | VNil => ~inl ()
//          | VCons x xs' => ~inr ~(~vec'#s dim x, ~vlist'#s (dim, k-1) xs')
//          end
//   end

// fn' ~vlist'#r : (p : int * int) -> ~vlist' p -> vlist = \p =>
//   match p with
//   (dim, k) =>
//     if k = 0
//     then \_ => VNil
//     else \xs => ~match xs with
//                 | ~inl _ => VNil
//                 | ~inr ~(x, xs') => VCons (~vec'#r dim x) (~vlist'#r (dim, k-1) xs')
//                 end
//   end

// fn ~vlist'#VNil : unit -> #~vlist' = \_ => #((0, 0), (() :: ~vlist' (0, 0)))
// fn ~vlist'#VCons : #~vec' * #~vlist' -> #~vlist' = \p =>
//   match p with
//   (v, vs) =>
//     match v with
//     #(dim1, v) =>
//       match vs with
//       #(k', vs) =>
//         match k' with
//         (dim2, k) =>
//           let dim = ~vec'#join dim1 dim2 in
//           let v = ~vec'#reshape dim1 dim v in
//           let vs = ~vlist'#reshape k' (dim, k) vs in
//           (#((dim, k+1),
//              ((~inr ~(v, vs) : unit ~+ ~vec' dim ~* ~vlist' (dim, k))
//                  :: ~vlist' (dim, k+1)))
//            : #~vlist')
//         end
//       end
//     end
//   end

// fn ~vlist'#match : #~vlist' -> (unit -> 'a) -> (#~vec' * #~vlist' -> 'a) -> 'a =
//   \vs f1 f2 =>
//     match vs with
//     #(k', vs) =>
//       (match k' with
//        (dim, k) =>
//          if k = 0 then \_ => f1 ()
//          else \vs =>
//            ~match vs with
//            | ~inl _ => f1 ()
//            | ~inr ~(v, vs') => f2 (#(dim, v), #((dim, k-1), vs'))
//            end
//        end : ~vlist' k' -> 'a) vs
//     end

// fn ~vlist'#view : vlist -> int * int = \vs =>
//   match vs with
//   | VNil => (0, 0)
//   | VCons v _ => (~vec'#view v, vlength vs)
//   end

// fn ~vlist'#join : int * int -> int * int -> int * int = \px py =>
//   match px with
//   (dimx, kx) =>
//     match py with
//     (dimy, ky) => (~vec'#join dimx dimy, if kx <= ky then ky else kx)
//     end
//   end

// fn ~vlist'#reshape :
//   (p : int * int) -> (p' : int * int) -> ~vlist' p -> ~vlist' p' = \p p' =>
//   match p' with
//   (dim', k') =>
//     if k' = 0
//     then \_ => ()
//     else
//       match p with
//       (dim, k) =>
//         if k = 0
//         then \_ => ~inl ()
//         else \vs =>
//                ~match vs with
//                | ~inl _ => ~inl ()
//                | ~inr ~(v, vs') =>
//                  ~inr ~(~vec'#reshape dim dim' v,
//                         ~vlist'#reshape (dim, k-1) (dim', k'-1) vs')
//                end
//       end
//   end

// fn ~vec#~vec'#coerce : #~vec -> #~vec' = \v =>
//   %match #~vec #~vec' v
//     (\_ => ~vec'#Nil ())
//     (\p => match p with
//            (x, v) => ~vec'#Cons (x, ~vec#~vec'#coerce v)
//            end)

// fn ~vlist#~vlist'#coerce : #~vlist -> #~vlist' = \vs =>
//   %match #~vlist #~vlist' vs
//     (\_ => ~vlist'#VNil ())
//     (\p => match p with
//            (v, vs) => ~vlist'#VCons (~vec#~vec'#coerce v, ~vlist#~vlist'#coerce vs)
//            end)

// --------------------------------------------------------------
// Join structures for oblivious types with exact bound

// Alternatively, we can cheat here by observing that, throughout the k-means
// computation, the dimension of the vectors remain the same. We still need a
// join structure because the compiler cannot statically decide if that is
// indeed the case. Note that this can result in incorrect implementation if we
// ever need to merge two [#~vec] with different dimensions.

fn ~vec#join : int -> int -> int = \k k' =>
  if k = k' then k else (-1)
fn ~vec#reshape : (k : int) -> (k' : int) -> ~vec k -> ~vec k' =
  \k k' v =>
    if k = k' then (v :: ~vec k')
    else ~~

// --------------------------------------------------------------
// Lifted functions

// fn ~test_kmeans : int -> int -> int -> #~vlist -> #~vlist -> #~vec + #~vec' =
//   %lift test_kmeans

fn ~test_kmeans : int -> int -> int -> #~vlist -> #~vlist -> #~vec =
  %lift test_kmeans