// ----------------------------------------------------------------
// List, oblivious list and its instances

data list = Nil | Cons int list

obliv ~list (k : int) =
  if k == 0
  then unit
  else unit ~+ ~int ~* ~list (k-1)

fn ~list#s : (k : int) -> list -> ~list k = \k xs =>
  if k == 0
  then ()
  else match xs with
       | Nil => ~inl ()
       | Cons x xs' => ~inr ~(~int#s x, ~list#s (k-1) xs')
       end

fn' ~list#r : (k : int) -> ~list k -> list = \k =>
  if k == 0
  then \_ => Nil
  else \xs => ~match xs with
              | ~inl _ => Nil
              | ~inr ~(x, xs') => Cons (~int#r x) (~list#r (k-1) xs')
              end

fn ~list#Nil : unit -> #~list = \_ =>
  #(0, (() :: ~list 0))

fn ~list#Cons : ~int * #~list -> #~list = \p =>
  match p with
  (x, pxs) =>
    match pxs with
    #(k, xs) =>
      #(k+1, ((~inr ~(x, xs) : unit ~+ ~int ~* ~list k) :: ~list (k+1)))
    end
  end

fn ~list#match : #~list -> (unit -> 'a) -> (~int * #~list -> 'a) -> 'a =
  \pxs f1 f2 =>
    match pxs with
    #(k, xs) =>
      (if k == 0
       then \_ => f1 ()
       else \xs =>
         ~match xs with
         | ~inl _ => f1 ()
         | ~inr ~(x, xs') => f2 (x, #(k-1, xs'))
         end : ~list k -> 'a) xs
    end

fn length : list -> int = \xs =>
  match xs with
  | Nil => 0
  | Cons _ xs' => 1 + length xs'
  end

fn ~list#view : list -> int = length

fn ~list#join : int -> int -> int = \x y => if x <= y then y else x

fn ~list#reshape : (k : int) -> (k' : int) -> ~list k -> ~list k' = \k k' =>
  if k' == 0
  then \_ => ()
  else
    if k == 0
    then \_ => ~inl ()
    else \xs =>
      ~match xs with
      | ~inl _ => ~inl ()
      | ~inr ~(x, xs') => ~inr ~(x, ~list#reshape (k-1) (k'-1) xs')
      end

obliv ~list_eq (k : int) =
  if k == 0
  then unit
  else ~int ~* ~list_eq (k-1)

fn ~list_eq#s : (k : int) -> list -> ~list_eq k = \k xs =>
  if k == 0
  then ()
  else match xs with
       | Nil => ~~
       | Cons x xs' => ~(~int#s x, ~list_eq#s (k-1) xs')
       end

fn' ~list_eq#r : (k : int) -> ~list_eq k -> list = \k =>
  if k == 0
  then \_ => Nil
  else \xs => ~match xs with
              ~(x, xs') => Cons (~int#r x) (~list_eq#r (k-1) xs')
              end

fn ~list_eq#Nil : unit -> #~list_eq = \_ =>
  #(0, (() :: ~list_eq 0))

fn ~list_eq#Cons : ~int * #~list_eq -> #~list_eq = \p =>
  match p with
  (x, pxs) =>
    match pxs with
    #(k, xs) =>
      #(k+1, (~(x, xs) :: ~list_eq (k+1)))
    end
  end

fn ~list_eq#match : #~list_eq -> (unit -> 'a) -> (~int * #~list_eq -> 'a) -> 'a =
  \pxs f1 f2 =>
    match pxs with
    #(k, xs) =>
      (if k == 0
       then \_ => f1 ()
       else \xs =>
         ~match xs with
         | ~(x, xs') => f2 (x, #(k-1, xs'))
         end : ~list_eq k -> 'a) xs
    end

fn ~list_eq#view : list -> int = length

fn ~list_eq#~list#coerce : #~list_eq -> #~list = \pxs =>
  %match #~list_eq #~list pxs
    (\_ => ~list#Nil ())
    (\xs =>
      match xs with
      (x, xs') => ~list#Cons (x, ~list_eq#~list#coerce xs')
      end)

// ----------------------------------------------------------------
// Decision tree, its oblivious types and instances

data dtree = Leaf int | Node int int dtree dtree

// This public view is the maximum height of the tree.
obliv ~dtree_max (k : int) =
  if k == 0
  then ~int
  else ~int ~+ ~int ~* ~int ~* ~dtree_max (k-1) ~* ~dtree_max (k-1)

fn ~dtree_max#s : (k : int) -> dtree -> ~dtree_max k = \k t =>
  if k == 0
  then
    match t with
    | Leaf x => ~int#s x
    | Node _ _ _ _ => ~~
    end
  else
    match t with
    | Leaf x => ~inl (~int#s x)
    | Node idx thd lt rt =>
        ~inr ~(~int#s idx, ~int#s thd,
               ~dtree_max#s (k-1) lt, ~dtree_max#s (k-1) rt)
    end

fn' ~dtree_max#r : (k : int) -> ~dtree_max k -> dtree = \k =>
  if k == 0
  then \x => Leaf (~int#r x)
  else \t =>
    ~match t with
    | ~inl x => Leaf (~int#r x)
    | ~inr ~(idx, thd, l, r) =>
        Node (~int#r idx) (~int#r thd)
             (~dtree_max#r (k-1) l) (~dtree_max#r (k-1) r)
    end

fn ~dtree_max#Leaf : ~int -> #~dtree_max = \x =>
  #(0, (x :: ~dtree_max 0))

fn ~dtree_max#Node :
  (~int * ~int * #~dtree_max * #~dtree_max) -> #~dtree_max =
  \x =>
    match x with
    (idx, thd, lt, rt) =>
      match lt with
      #(lk, lt') =>
        match rt with
        #(rk, rt') =>
          let k = ~dtree_max#join lk rk in
          (#(k+1, ((~inr ~(idx, thd,
                         ~dtree_max#reshape lk k lt',
                         ~dtree_max#reshape rk k rt')
                    : ~int ~+ ~int ~* ~int ~* ~dtree_max k ~* ~dtree_max k)
                    :: ~dtree_max (k+1)))
            : #~dtree_max)
        end
      end
    end

fn ~dtree_max#match :
  #~dtree_max ->
  (~int -> 'a) ->
  (~int * ~int * #~dtree_max * #~dtree_max -> 'a) ->
  'a = \pt f1 f2 =>
  match pt with
  #(k, t) =>
    (if k == 0
     then \x => f1 x
     else \n =>
       ~match n with
       | ~inl x => f1 x
       | ~inr ~(idx, thd, lt, rt) =>
           f2 (idx, thd, #(k-1, lt), #(k-1, rt))
       end : ~dtree_max k -> 'a) t
  end

fn ~dtree_max#join : int -> int -> int = \x y => if x <= y then y else x

fn ~dtree_max#reshape :
  (k : int) -> (k' : int) -> ~dtree_max k -> ~dtree_max k' = \k k' =>
  if k' == 0
  then
    if k == 0
    then \x => x
    else \_ => ~~
  else
    if k == 0
    then \x => ~inl x
    else \n =>
      ~match n with
      | ~inl x => ~inl x
      | ~inr ~(idx, thd, lt, rt) =>
          ~inr ~(idx, thd,
                ~dtree_max#reshape (k-1) (k'-1) lt,
                ~dtree_max#reshape (k-1) (k'-1) rt)
      end

// ----------------------------------------------------------------
// Functionality

fn elem : int -> list -> bool = \y xs =>
  match xs with
  | Nil => False
  | Cons x xs' => if x == y then True else elem y xs'
  end

fn map : (int -> int) -> list -> list = \f xs =>
  match xs with
  | Nil => Nil
  | Cons x xs' => Cons (f x) (map f xs')
  end

fn filter : (int -> bool) -> list -> list = \f xs =>
  match xs with
  | Nil => Nil
  | Cons x xs' =>
    let v = filter f xs' in
    if f x then Cons x v else v
  end

fn lookup : list -> int -> int = \xs i =>
  match xs with
  | Nil => 0
  | Cons x xs' =>
    if 0 == i then x else lookup xs' (i-1)
  end

// Technically this is not an association list. Encoding a proper association
// list is not hard, but need to redefine the list type and boilerplate
// instances due to the lack of type polymorphism.
fn assoc_lookup : list -> list -> int -> int = \keys values key =>
  match keys with
  | Nil => 0
  | Cons k keys' =>
    match values with
    | Nil => 0
    | Cons v values' =>
      if key == k then v else assoc_lookup keys' values' key
    end
  end

// Encoded as close to the coil implementation as possible.
fn log_lookup : list -> int -> int = \xs i =>
  log_lookup_ xs 0 (length xs) i

fn log_lookup_ : list -> int -> int -> int -> int = \xs s e i =>
  if s == e - 1 then lookup xs s
  else
    let mid = s + half (e - s) in
    if mid <= i
    then log_lookup_ xs mid e i
    else log_lookup_ xs s mid i

fn half : int -> int = half_ 0

fn half_ : int -> int -> int = \i x =>
  if i * 2 <= x then half_ (i+1) x
  else i - 1

fn merge : list -> list -> list = \xs ys =>
  match xs with
  | Nil => ys
  | Cons x xs' =>
    match ys with
    | Nil => xs
    | Cons y ys' =>
      if y <= x
      then Cons y (merge xs ys')
      else Cons x (merge xs' ys)
    end
  end

fn decide : dtree -> list -> int = \t xs =>
  match t with
  | Leaf x => x
  | Node idx thd lt rt =>
      let x = lookup xs idx in
      if x <= thd then decide lt xs else decide rt xs
  end

// ----------------------------------------------------------------
// Lifted oblivious functions

fn ~filter : (~int -> ~bool) -> #~list -> #~list = %lift filter

fn ~map : (~int -> ~int) -> #~list -> #~list = %lift map

fn ~elem : ~int -> #~list_eq -> ~bool = %lift elem

fn ~test_filter : #~list -> ~int -> #~list = \xs y =>
  ~filter (\x => x ~<= y) xs

fn ~decide_max : #~dtree_max -> #~list_eq -> ~int = %lift decide
fn ~decide_all : dtree -> #~list_eq -> ~int = %lift decide

// ----------------------------------------------------------------
// Coil benchmark

// associative_array
fn ~assoc_lookup : #~list_eq -> #~list_eq -> ~int -> ~int = %lift assoc_lookup

// filter
fn map_as_filter : list -> int -> list = \xs y =>
  map (\x => if y <= x then x else 0) xs
fn ~map_as_filter : #~list_eq -> ~int -> #~list_eq = %lift map_as_filter

// linear_oram
fn ~lookup : #~list_eq -> ~int -> ~int = %lift lookup

// log_oram
fn ~log_lookup : #~list_eq -> ~int -> ~int = %lift log_lookup

// merge
fn ~merge : #~list_eq -> #~list_eq -> #~list = %lift merge
